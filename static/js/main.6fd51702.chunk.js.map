{"version":3,"sources":["components/Header/SHeader.styled.js","components/Header/index.js","container/Board/Board.styled.js","utility.js","container/Card/SCard.styled.js","components/TaskItem/STaskItem.styled.js","components/TaskItem/index.js","components/Label/Label.styled.js","components/Label/index.js","components/TextArea/STextArea.styled.js","components/TextArea/index.js","hooks/useClickOutside.js","components/EditableField/index.js","components/TaskList/index.js","components/Button/Button.styled.js","components/Button/index.js","components/EditPopUp/EditPopup.styled.js","components/EditPopUp/index.js","container/Card/index.js","container/Board/index.js","components/Wrapper/SWrapper.styled.js","components/Wrapper/index.js","data.js","App.js","reportWebVitals.js","index.js"],"names":["SHeader","styled","div","SNavbar","Header","children","SBoard","section","uniqID","Math","random","toString","substr","saveToStorage","COLS","COLUMNS","JSON","stringify","localStorage","setItem","SCardWrapper","SCard","SCardHeader","SCardBody","SCardFooter","STaskItem","STaskDescription","p","TaskItem","description","onClick","props","defaultProps","SLabel","h2","Label","value","STextArea","textarea","title","TextArea","placeholder","useOnClickOutside","ref","handler","useEffect","listener","event","current","contains","target","document","addEventListener","removeEventListener","EditableField","content","type","useRef","useState","setValue","editMode","setEditMode","toggleEditeMode","onChange","e","TaskList","tasks","onDragStart","map","task","draggable","desc","id","SButton","button","primary","Button","SPopupWrapper","display","SPopupContainer","primaryPopup","EditPopup","callback","buttonTitle","textareaPlaceHolder","textValue","setText","isPopupOpen","setPopupOpen","togglePopup","style","marginTop","preventDefault","Card","columnId","handleAddTask","Board","cols","columns","seColumns","draggedTask","setDraggedTask","newTask","columnTitle","newColumns","push","onDragOver","flexDirection","Object","entries","key","onDrop","console","log","sourceTitle","filter","newCols","Wrapper","Done","App","getItem","parse","loadFromStorage","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.6fd51702.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\nconst SHeader = styled.div`\r\n  padding: 0.3rem;\r\n  width: 100%;\r\n  height: 40px;\r\n  display: flex;\r\n`;\r\nconst SNavbar = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align: center;\r\n  background: #ffffff4a;\r\n  border-radius: 3px;\r\n  padding: 0.5rem;\r\n  width: 100%;\r\n  color: white;\r\n  height: 35px;\r\n`;\r\n\r\nexport { SHeader, SNavbar };\r\n","import React from \"react\";\r\nimport { SHeader, SNavbar } from \"./SHeader.styled\";\r\n\r\nconst Header = ({ children }) => {\r\n  return (\r\n    <SHeader>\r\n      <SNavbar>{children}</SNavbar>\r\n    </SHeader>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import styled from \"styled-components\";\r\n\r\nconst SBoard = styled.section`\r\n  user-select: none;\r\n  white-space: nowrap;\r\n  margin-bottom: 8px;\r\n  overflow-x: auto;\r\n  overflow-y: hidden;\r\n  padding-bottom: 8px;\r\n  position: absolute;\r\n  top: 70px;\r\n  height: 90vh;\r\n  right: 0;\r\n  bottom: 0;\r\n  left: 0;\r\n`;\r\n\r\nexport default SBoard;\r\n","// GENERATE A RANDOM UNIQUE ID\r\n\r\nconst uniqID = () => \"_\" + Math.random().toString(36).substr(2, 9);\r\n\r\n// save to localStorage\r\n\r\nconst saveToStorage = (COLS) => {\r\n  let COLUMNS = JSON.stringify(COLS);\r\n  localStorage.setItem(\"COLUMNS\", COLUMNS);\r\n};\r\n\r\n// LOAD FROM LOCALSTORAGE\r\nconst loadFromStorage = () => {\r\n  let columns = localStorage.getItem(\"COLUMNS\");\r\n  return columns ? JSON.parse(columns) : null;\r\n};\r\n\r\nexport { uniqID, saveToStorage, loadFromStorage };\r\n","import styled from \"styled-components\";\r\n\r\nconst SCardWrapper = styled.div`\r\n  width: 272px;\r\n  margin: 0 4px;\r\n  height: 100%;\r\n  box-sizing: border-box;\r\n  display: inline-block;\r\n  vertical-align: top;\r\n  white-space: nowrap;\r\n`;\r\nconst SCard = styled.div`\r\n  background-color: #ebecf0;\r\n  border-radius: 3px;\r\n  box-sizing: border-box;\r\n  display: flex;\r\n  flex-direction: column;\r\n  max-height: 100%;\r\n  position: relative;\r\n  white-space: normal;\r\n`;\r\n\r\nconst SCardHeader = styled.div`\r\n  width: inherit;\r\n\r\n  height: 40px;\r\n  cursor: pointer;\r\n`;\r\n\r\nconst SCardBody = styled.div`\r\n  width: inherit;\r\n  padding: 0 0.5rem;\r\n`;\r\nconst SCardFooter = styled.div`\r\n  width: inherit;\r\n  padding: 0.5rem;\r\n  color: #172b4d;\r\n`;\r\n\r\nexport { SCardWrapper, SCard, SCardHeader, SCardBody, SCardFooter };\r\n","import styled from \"styled-components\";\r\n\r\nconst STaskItem = styled.div`\r\n  padding: 0.5rem;\r\n  background-color: #fff;\r\n  border-radius: 3px;\r\n  box-shadow: 0 1px 0 rgb(9 30 66 / 25%);\r\n  cursor: pointer;\r\n  display: block;\r\n  margin-bottom: 8px;\r\n  max-width: 300px;\r\n  min-height: 20px;\r\n  position: relative;\r\n  text-decoration: none;\r\n  z-index: 0;\r\n  cursor: move;\r\n`;\r\nconst STaskDescription = styled.p`\r\n  min-height: 20px;\r\n  min-width: 50px;\r\n  width: fit-content;\r\n  cursor: text;\r\n`;\r\n\r\nexport { STaskItem, STaskDescription };\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { STaskDescription, STaskItem } from \"./STaskItem.styled\";\r\n\r\nconst TaskItem = ({ description, onClick, ...props }) => {\r\n  return (\r\n    <STaskItem>\r\n      <STaskDescription onClick={onClick} {...props}>\r\n        {description}\r\n      </STaskDescription>\r\n    </STaskItem>\r\n  );\r\n};\r\n\r\nTaskItem.propTypes = {\r\n  // task description\r\n  description: PropTypes.string.isRequired,\r\n\r\n  // onClick event Handler\r\n  onClick: PropTypes.func,\r\n};\r\nTaskItem.defaultProps = {\r\n  // TASK BREF DESCRIPTION\r\n  description: \"\",\r\n\r\n  // EVENT HANDLER ONCLICK ON THE TEXT\r\n  onClick: () => {},\r\n};\r\nexport default TaskItem;\r\n","import styled from \"styled-components\";\r\n\r\nconst SLabel = styled.h2`\r\n  color: #3e4f6b;\r\n  font-size: 0.8rem;\r\n  padding: 0.5rem 0.5rem 0.5rem 0.8rem;\r\n  margin: 0px;\r\n`;\r\n\r\nexport { SLabel };\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { SLabel } from \"./Label.styled\";\r\n\r\nconst Label = ({ value, ...props }) => <SLabel {...props}>{value}</SLabel>;\r\n\r\nLabel.propTypes = {\r\n  value: PropTypes.string.isRequired,\r\n};\r\nLabel.defaultProps = {\r\n  // String\r\n  value: \"\",\r\n};\r\n\r\nexport default Label;\r\n","import styled from \"styled-components\";\r\n\r\nconst STextArea = styled.textarea`\r\n  width: 100%;\r\n  background-color: white;\r\n  border: solid 2px #0079bf;\r\n  border-radius: 4px;\r\n  max-height: ${({ title }) => (title ? \"39px\" : \"inherit\")};\r\n  height: max-content;\r\n\r\n  vertical-align: middle;\r\n  padding: 10px 0 0 5px;\r\n  &:focus {\r\n    outline: none;\r\n    border: solid 2px #0079bf;\r\n  }\r\n`;\r\n\r\nexport { STextArea };\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { STextArea } from \"./STextArea.styled\";\r\nconst TextArea = ({ placeholder, value, ...props }) => {\r\n  return <STextArea placeholder={placeholder} value={value} {...props} />;\r\n};\r\n\r\nTextArea.propTypes = {\r\n  placeholder: PropTypes.string.isRequired,\r\n  value: PropTypes.string.isRequired,\r\n};\r\nTextArea.defaultProps = {\r\n  placeholder: \"Add Description ...\",\r\n  value: \"\",\r\n};\r\nexport default TextArea;\r\n","import { useEffect } from \"react\";\r\n/**\r\n *\r\n * @param {objec} ref conmponent ref\r\n * @param {func} handler callback\r\n */\r\nconst useOnClickOutside = (ref, handler) => {\r\n  useEffect(\r\n    () => {\r\n      const listener = (event) => {\r\n        // Do nothing if clicking ref's element or descendent elements\r\n        if (!ref.current || ref.current.contains(event.target)) {\r\n          return;\r\n        }\r\n        handler(event);\r\n      };\r\n      document.addEventListener(\"mousedown\", listener);\r\n      document.addEventListener(\"touchstart\", listener);\r\n      return () => {\r\n        document.removeEventListener(\"mousedown\", listener);\r\n        document.removeEventListener(\"touchstart\", listener);\r\n      };\r\n    },\r\n    // Add ref and handler to effect dependencies\r\n    // It's worth noting that because passed in handler is a new ...\r\n    // ... function on every render that will cause this effect ...\r\n    // ... callback/cleanup to run every render. It's not a big deal ...\r\n    // ... but to optimize you can wrap handler in useCallback before ...\r\n    // ... passing it into this hook.\r\n    [ref, handler]\r\n  );\r\n};\r\n\r\nexport default useOnClickOutside;\r\n","import React, { useState, useRef } from \"react\";\r\nimport TaskItem from \"../TaskItem\";\r\nimport Label from \"../Label\";\r\nimport TextArea from \"../TextArea\";\r\n// Hooks\r\nimport useOnClickOutside from \"../../hooks/useClickOutside\";\r\n\r\nconst EditableField = ({ content, type, ...props }) => {\r\n  // ref\r\n  const ref = useRef();\r\n\r\n  // current value of the editable field (title of column / desc of task)\r\n  const [value, setValue] = useState(content);\r\n\r\n  // edite mode (enabled / disabled)\r\n  const [editMode, setEditMode] = useState(false);\r\n\r\n  // handle toggle edit mode\r\n  const toggleEditeMode = () => {\r\n    setEditMode(!editMode);\r\n  };\r\n  const handleChangeContent = (e) => setValue(e.target.value);\r\n\r\n  useOnClickOutside(ref, () => setEditMode(false));\r\n  return (\r\n    <div ref={ref} {...props}>\r\n      {editMode ? (\r\n        <TextArea\r\n          onChange={handleChangeContent}\r\n          value={value}\r\n          placeholder={\"Add Column title ...\"}\r\n          title\r\n        />\r\n      ) : type === \"list\" ? (\r\n        <TaskItem onClick={toggleEditeMode} description={value} />\r\n      ) : (\r\n        <Label onClick={toggleEditeMode} value={value} />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default EditableField;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport EditableField from \"../EditableField\";\r\n//import DraggableItems from \"../DraggableItems\";\r\nconst TaskList = ({ tasks, onDragStart }) => {\r\n  return (\r\n    <>\r\n      {tasks.map((task) => (\r\n        <div key={task.id} onDragStart={onDragStart(task)} draggable>\r\n          <EditableField key={task.id} content={task.desc} type=\"list\" />\r\n        </div>\r\n      ))}\r\n    </>\r\n  );\r\n};\r\n\r\n// PROPTYPES\r\nTaskList.propTypes = {\r\n  tasks: PropTypes.arrayOf(PropTypes.object),\r\n};\r\n\r\n// DEFAULT PROPTYPES\r\nTaskList.defaultProps = {\r\n  tasks: [],\r\n  onDragStart: () => {},\r\n};\r\n\r\nexport default TaskList;\r\n","import styled from \"styled-components\";\r\n\r\nconst SButton = styled.button`\r\n  background-color: ${({ primary }) =>\r\n    primary ? \"#0079bf\" : \"rgba(9, 30, 66, 0.04)\"};\r\n  box-shadow: none;\r\n  border: none;\r\n  color: ${({ primary }) => (primary ? \"#fff\" : \"#5e6c84\")};\r\n  display: inline-flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  border-radius: 3px;\r\n  cursor: pointer;\r\n  padding: 6px 12px;\r\n  text-decoration: none;\r\n  margin-right: 0.5rem;\r\n  box-shadow: none;\r\n  border: none;\r\n  transition-property: background-color, border-color, box-shadow;\r\n  transition-duration: 85ms;\r\n  transition-timing-function: ease;\r\n  &:hover {\r\n    background-color: ${({ primary }) =>\r\n      primary ? \"#0079bf\" : \"rgba(9, 30, 66, 0.08)\"};\r\n  }\r\n`;\r\n\r\nexport { SButton };\r\n","import React from \"react\";\r\nimport { SButton } from \"./Button.styled\";\r\n\r\nconst Button = ({ title, ...props }) => <SButton {...props}>{title}</SButton>;\r\n\r\nexport default Button;\r\n","import styled from \"styled-components\";\r\n\r\nconst filter = styled.div`\r\n  position: absolute;\r\n  height: 100vh;\r\n  display: ${({ display }) => (display ? \"block\" : \"none\")};\r\n  width: 100vw;\r\n  top: 0;\r\n  left: 0;\r\n  z-index: 11;\r\n  background: #2e36439e;\r\n`;\r\nexport default filter;\r\n\r\nconst SPopupWrapper = styled.div`\r\n  position: relative;\r\n  display: inline-block;\r\n  width: 100%;\r\n  max-width: 272px;\r\n`;\r\nconst SPopupContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  background: #ebecf0;\r\n  padding: ${({ primaryPopup }) => (primaryPopup ? \"0.5rem\" : \"0\")};\r\n  border-radius: 3px;\r\n`;\r\n\r\nexport { SPopupContainer, SPopupWrapper };\r\n","import React, { useRef, useState } from \"react\";\r\nimport Button from \"../Button\";\r\nimport TextArea from \"../TextArea\";\r\nimport { SPopupContainer, SPopupWrapper } from \"./EditPopup.styled\";\r\nimport useOnClickOutside from \"../../hooks/useClickOutside\";\r\n\r\nconst EditPopup = ({\r\n  callback,\r\n  buttonTitle,\r\n  textareaPlaceHolder,\r\n  primaryPopup,\r\n}) => {\r\n  // Create a ref that we add to the element for which we want to detect outside clicks\r\n  const ref = useRef();\r\n\r\n  // state for our text in the textarea\r\n  const [textValue, setText] = useState(\"\");\r\n\r\n  // State for our Popup\r\n  const [isPopupOpen, setPopupOpen] = useState(false);\r\n\r\n  // handle change text\r\n  const handleChangeText = (e) => setText(e.target.value);\r\n\r\n  // toggle popup\r\n  const togglePopup = () => {\r\n    setPopupOpen(!isPopupOpen);\r\n  };\r\n\r\n  // upload changed text\r\n  const handleUploadText = (e) => {\r\n    e.preventDefault();\r\n    if (textValue) {\r\n      callback(textValue);\r\n      togglePopup();\r\n      setText(\"\");\r\n    }\r\n  };\r\n\r\n  // Call hook passing in the ref and a function to call on outside click\r\n  useOnClickOutside(ref, () => setPopupOpen(false));\r\n  return (\r\n    <SPopupWrapper ref={ref}>\r\n      {isPopupOpen ? (\r\n        <SPopupContainer primaryPopup={primaryPopup}>\r\n          <TextArea\r\n            onChange={handleChangeText}\r\n            placeholder={textareaPlaceHolder}\r\n            value={textValue}\r\n          />\r\n\r\n          <div style={{ marginTop: \"0.5rem\" }}>\r\n            <Button primary title={buttonTitle} onClick={handleUploadText} />\r\n            <Button title={\"x\"} onClick={togglePopup} />\r\n          </div>\r\n        </SPopupContainer>\r\n      ) : (\r\n        <Button\r\n          primary={primaryPopup}\r\n          title={buttonTitle}\r\n          onClick={togglePopup}\r\n        />\r\n      )}\r\n    </SPopupWrapper>\r\n  );\r\n};\r\nEditPopup.defaultProps = {\r\n  textareaPlaceHolder: \"Add Task Description ...\",\r\n  callback: () => {},\r\n  buttonTitle: \"+ Add a Task\",\r\n  primaryPopup: false,\r\n};\r\nexport default EditPopup;\r\n","import React from \"react\";\r\nimport {\r\n  SCardWrapper,\r\n  SCard,\r\n  SCardHeader,\r\n  SCardBody,\r\n  SCardFooter,\r\n} from \"./SCard.styled\";\r\nimport EditableField from \"../../components/EditableField\";\r\nimport TaskList from \"../../components/TaskList\";\r\nimport EditPopup from \"../../components/EditPopUp\";\r\n\r\nconst Card = ({\r\n  columnId,\r\n  title,\r\n  tasks,\r\n  handleAddTask,\r\n  onDragStart,\r\n  ...props\r\n}) => {\r\n  /**\r\n   * HANDLE ADD NEW TASK DESCRIPTION\r\n   * @param {string} description\r\n   * @returns\r\n   */\r\n  const handleTaskDesc = (desc) => handleAddTask(desc);\r\n\r\n  return (\r\n    <SCardWrapper {...props}>\r\n      <SCard>\r\n        <SCardHeader>\r\n          <EditableField content={title} />\r\n        </SCardHeader>\r\n        <SCardBody>\r\n          <TaskList tasks={tasks} onDragStart={onDragStart} />\r\n        </SCardBody>\r\n        <SCardFooter>\r\n          <EditPopup callback={handleTaskDesc} />\r\n        </SCardFooter>\r\n      </SCard>\r\n    </SCardWrapper>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport SBoard from \"./Board.styled\";\r\n\r\nimport { uniqID, saveToStorage } from \"../../utility\";\r\n\r\nimport Card from \"../Card\";\r\nimport EditPopup from \"../../components/EditPopUp\";\r\n\r\nconst Board = ({ cols }) => {\r\n  // COLUMN STATE\r\n  const [columns, seColumns] = useState(cols);\r\n\r\n  // DRAGGED TASK STATE\r\n  const [draggedTask, setDraggedTask] = useState(null);\r\n\r\n  /**\r\n   * ADD COLUMN TITLE HANDLER\r\n   * @param {string} title\r\n   */\r\n  const handleAddColumn = (title) => {\r\n    let newCols = {\r\n      ...columns,\r\n      [title]: {\r\n        id: uniqID(),\r\n\r\n        title,\r\n        tasks: [],\r\n      },\r\n    };\r\n    seColumns(newCols);\r\n\r\n    // SAVE ADD NEW COLUMNS TO LOCAL STORAGE\r\n    saveToStorage(newCols);\r\n  };\r\n\r\n  // Add task to the specific column\r\n  /**\r\n   *\r\n   * @param {string} title current column title\r\n  \r\n   * @param {sting} desc description\r\n   * @returns\r\n   */\r\n  const handleAddTask = (title) => (desc) => {\r\n    let newTask = {\r\n      id: uniqID(),\r\n      columnTitle: title,\r\n      desc,\r\n    };\r\n    let newColumns = { ...columns };\r\n    newColumns[title].tasks.push(newTask);\r\n    seColumns(newColumns);\r\n    saveToStorage(newColumns);\r\n  };\r\n  // onDragover\r\n  const onDragOver = (e) => e.preventDefault();\r\n\r\n  /**\r\n   *\r\n   * @param {string} title\r\n   * @returns\r\n   */\r\n  const onDrop = (title) => (e) => {\r\n    console.log(title);\r\n\r\n    let newColumns = { ...columns };\r\n    newColumns[title].tasks.push({\r\n      ...draggedTask,\r\n      columnTitle: title,\r\n    });\r\n    let sourceTitle = draggedTask.columnTitle;\r\n    newColumns[sourceTitle].tasks = newColumns[sourceTitle].tasks.filter(\r\n      ({ id }) => id !== draggedTask.id\r\n    );\r\n\r\n    // CLEAR ADD TASK\r\n    setDraggedTask(null);\r\n\r\n    // UPDATE COLUMN\r\n    seColumns(newColumns);\r\n\r\n    // SAVE TO LOCAL STORAGE AFTER DRAGGING\r\n    saveToStorage(newColumns);\r\n  };\r\n\r\n  /**\r\n   * DRAGSTART EVENT HANDLER\r\n   * @param {object} task\r\n   * @returns\r\n   */\r\n  const onDragStart = (task) => (e) => {\r\n    //initialize dragged task\r\n    setDraggedTask(task);\r\n  };\r\n\r\n  return (\r\n    <div style={{ display: \"flex\", flexDirection: \"column\" }}>\r\n      <div>navbar</div>\r\n      <SBoard>\r\n        {Object.entries(columns).map(([key, value]) => (\r\n          <Card\r\n            onDragStart={onDragStart}\r\n            onDragOver={onDragOver}\r\n            onDrop={onDrop(key)}\r\n            key={key}\r\n            columnId={value.id}\r\n            title={key}\r\n            tasks={value.tasks}\r\n            handleAddTask={handleAddTask(key)}\r\n          />\r\n        ))}\r\n        <EditPopup\r\n          primaryPopup\r\n          buttonTitle={\"+ Add Column\"}\r\n          textareaPlaceHolder={\"Add Column Title ...\"}\r\n          callback={handleAddColumn}\r\n        />\r\n      </SBoard>\r\n    </div>\r\n  );\r\n};\r\n\r\nBoard.propTypes = {\r\n  col: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      title: PropTypes.string.isRequired,\r\n      tasks: PropTypes.arrayOf(\r\n        PropTypes.shape({\r\n          id: PropTypes.string.isRequired,\r\n          columnTitle: PropTypes.string.isRequired,\r\n          desc: PropTypes.string.isRequired,\r\n        })\r\n      ),\r\n    })\r\n  ),\r\n};\r\nBoard.defaultProps = {\r\n  cols: [],\r\n};\r\nexport default Board;\r\n","import styled from \"styled-components\";\r\n\r\nconst Wrapper = styled.div`\r\n  position: relative;\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 100%;\r\n  height: 100%;\r\n`;\r\n\r\nexport default Wrapper;\r\n","import React from \"react\";\r\nimport SWrapper from \"./SWrapper.styled\";\r\n\r\nconst Wrapper = ({ children }) => {\r\n  return <SWrapper>{children}</SWrapper>;\r\n};\r\n\r\nexport default Wrapper;\r\n","import { uniqID } from \"./utility\";\r\n\r\nlet columns = {\r\n  \"To Do\": {\r\n    id: uniqID(),\r\n    title: \"Todo\",\r\n    tasks: [\r\n      { id: uniqID(), columnTitle: \"To Do\", desc: \"task six\" },\r\n      { id: uniqID(), columnTitle: \"To Do\", desc: \"task seven\" },\r\n      { id: uniqID(), columnTitle: \"To Do\", desc: \"task nine\" },\r\n    ],\r\n  },\r\n\r\n  \"In Progress\": {\r\n    id: uniqID(),\r\n    title: \"In Progress\",\r\n    tasks: [\r\n      { id: uniqID(), columnTitle: \"In Progress\", desc: \"task one\" },\r\n      { id: uniqID(), columnTitle: \"In Progress\", desc: \"task twp\" },\r\n      {\r\n        id: uniqID(),\r\n        columnTitle: \"In Progress\",\r\n        desc: \"task three\",\r\n      },\r\n    ],\r\n  },\r\n  Done: {\r\n    id: uniqID(),\r\n    title: \"Done\",\r\n    tasks: [\r\n      { id: uniqID(), columnTitle: \"Done\", desc: \"task four\" },\r\n      { id: uniqID(), columnTitle: \"Done\", desc: \"task five\" },\r\n      { id: uniqID(), columnTitle: \"Done\", desc: \"task ten\" },\r\n    ],\r\n  },\r\n};\r\nexport default columns;\r\n","import Header from \"./components/Header\";\nimport Board from \"./container/Board\";\nimport Wrapper from \"./components/Wrapper\";\nimport columns from \"./data\";\nimport { loadFromStorage } from \"./utility\";\nimport \"./App.css\";\n\nfunction App() {\n  const cols = loadFromStorage(\"COLUMNS\") || columns;\n\n  /**\n   * I CHOOSED NOT TO USE CONTEXT (fix prop drilling)\n   */\n  return (\n    <Wrapper>\n      <Header> Trello </Header>\n      <Board cols={cols} />\n    </Wrapper>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}